diff --git a/node_modules/json-schema-to-markdown/index.js b/node_modules/json-schema-to-markdown/index.js
index 6b805f9..eea11d2 100644
--- a/node_modules/json-schema-to-markdown/index.js
+++ b/node_modules/json-schema-to-markdown/index.js
@@ -13,18 +13,14 @@ function generateElementTitle(octothorpes, elementName, elementType, isRequired,
 	if(elementName) {
 		text.push(' `' + elementName + '`')
 	}
-	if (elementType || isRequired) {
-		text.push(' (')
-		if (elementType) {
-			text.push(elementType)
-		}
-		if (isEnum) {
-			text.push(', enum')
-		}
-		if (isRequired) {
-			text.push(', required')
-		}
-		text.push(')')
+	const elementInfo = [
+		elementType,
+		isEnum && 'enum',
+		isRequired && 'required'
+	].filter(Boolean).join(', ')
+
+	if (elementInfo) {
+		text.push(` (${elementInfo})`)
 	}
 	if (example) {
 		text.push(' eg: `' + example + '`')
@@ -59,7 +55,7 @@ function generateSchemaSectionText(octothorpes, name, isRequired, schema, subSch
 	var schemaType = getActualType(schema, subSchemas)
 
 	var text = [
-		generateElementTitle(octothorpes, name, schemaType, isRequired, schema.enum, schema.example),
+		generateElementTitle(octothorpes, name, schemaType, isRequired, Boolean(schema.enum), schema.example),
 		schema.description
 	]
 
@@ -70,6 +66,12 @@ function generateSchemaSectionText(octothorpes, name, isRequired, schema, subSch
 				text = text.concat(section)
 			})
 		}
+		if (schema.patternProperties) {
+			text.push('Pattern properties of the `' + name + '` object:')
+			generatePropertySection(octothorpes, schema, subSchemas, 'patternProperties').forEach((section) => {
+				text = text.concat(section)
+			})
+		}
 	} else if (schemaType === 'array') {
 		var itemsType = schema.items && schema.items.type
 
@@ -96,6 +98,9 @@ function generateSchemaSectionText(octothorpes, name, isRequired, schema, subSch
 			} else if (schema.items.not) {
 				text.push('The elements of the array must *not* match the following properties:')
 				validationItems = schema.items.not
+			} else if (schema.items.enum) {
+				text.push('The elements of the array can contain the following enum values:');
+				text.push(schema.items.enum.map(enumItem => `- \`${enumItem}\``).join('\n'))
 			}
 
 			if (validationItems.length > 0) {
@@ -120,9 +125,7 @@ function generateSchemaSectionText(octothorpes, name, isRequired, schema, subSch
 
 	if (schema.enum) {
 		text.push('This element must be one of the following enum values:');
-		text.push(schema.enum.map(function(enumItem) {
-			return '* `' + enumItem + '`'
-		}).join('\n'))
+		text.push(schema.enum.map(enumItem => `- \`${enumItem}\``).join('\n'))
 	}
 
 	if (schema.default !== undefined) {
@@ -130,7 +133,7 @@ function generateSchemaSectionText(octothorpes, name, isRequired, schema, subSch
 			text.push('Default: `' + JSON.stringify(schema.default) + '`')
 		} else {
 			text.push('Default:')
-			text.push('```\n' + JSON.stringify(schema.default, null, 2) + '\n```')
+			text.push('```json\n' + JSON.stringify(schema.default, null, 2) + '\n```')
 		}
 	}
 
@@ -144,11 +147,11 @@ function generateSchemaSectionText(octothorpes, name, isRequired, schema, subSch
 	return text
 }
 
-function generatePropertySection(octothorpes, schema, subSchemas) {
-	if (schema.properties) {
-		return Object.keys(schema.properties).map(function(propertyKey) {
+function generatePropertySection(octothorpes, schema, subSchemas, schemaPropertiesKey = 'properties') {
+	if (schema[schemaPropertiesKey]) {
+		return Object.keys(schema[schemaPropertiesKey]).map(function(propertyKey) {
 			var propertyIsRequired = schema.required && schema.required.indexOf(propertyKey) >= 0
-			return generateSchemaSectionText(octothorpes + '#', propertyKey, propertyIsRequired, schema.properties[propertyKey], subSchemas)
+			return generateSchemaSectionText(octothorpes + '#', propertyKey, propertyIsRequired, schema[schemaPropertiesKey][propertyKey], subSchemas)
 		})
 	} else if (schema.oneOf) {
 		var oneOfList = schema.oneOf.map(function(innerSchema) {
@@ -202,14 +205,12 @@ module.exports = function(schema, startingOctothorpes) {
 		text.push('# Sub Schemas')
 		text.push('The schema defines the following additional types:')
 		Object.keys(schema.definitions).forEach(function(subSchemaTypeName) {
-			text.push('## `' + subSchemaTypeName + '` (' + schema.definitions[subSchemaTypeName].type + ')')
-			text.push(schema.definitions[subSchemaTypeName].description)
-			if (schema.definitions[subSchemaTypeName].type === 'object') {
-				if (schema.definitions[subSchemaTypeName].properties) {
-					text.push('Properties of the `' + subSchemaTypeName + '` object:')
-				}
+			const definition = schema.definitions[subSchemaTypeName]
+			text.push(`## \`${subSchemaTypeName}\` (${definition.type || (definition.enum && 'enum')})`, definition.description);
+			if (definition.type === 'object' && definition.properties) {
+				text.push(`Properties of the \`${subSchemaTypeName}\` object:`)
 			}
-			generatePropertySection('##', schema.definitions[subSchemaTypeName], subSchemaTypes).forEach(function(section) {
+			generatePropertySection('##', definition, subSchemaTypes).forEach(function(section) {
 				text = text.concat(section)
 			})
 		})
